name: Sonar Scan

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - feature/Adding_Mend_Sonar_Scans

permissions:
  contents: read
  packages: read
  statuses: write

jobs:
  sonar:
    runs-on: windows-latest
    strategy:
      matrix:
        solution:
          - SignIn/SignIn.sln
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Install .NET MAUI Workload
        run: dotnet workload install maui
        shell: powershell

      - name: Setup Java (required for SonarScanner)
        uses: actions/setup-java@v4
        with:
          distribution: "microsoft"
          java-version: "17"

      - name: Setup nuget.exe
        uses: nuget/setup-nuget@v2
        with:
          nuget-version: latest

      - name: Install SonarScanner and Coverage tools
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-coverage
        shell: powershell

      - name: Get solution name for Sonar project key
        id: solution-name
        run: |
          $solutionPath = "${{ matrix.solution }}"
          $solutionName = [System.IO.Path]::GetFileNameWithoutExtension($solutionPath)
          echo "solution-name=$solutionName" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Begin Sonar analysis
        run: |
          dotnet sonarscanner begin /k:"TrimbleConnect.Samples:${{ steps.solution-name.outputs.solution-name }}" /d:sonar.host.url="${{ vars.TC_SONAR_HOST_URL }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.login="${{ secrets.TC_SONAR_TOKEN }}" /d:sonar.dotnet.excludeTestProjects=true
        shell: powershell

      - name: Restore NuGet packages
        run: dotnet restore "${{ matrix.solution }}"
        shell: powershell

      - name: Build solution
        run: dotnet build "${{ matrix.solution }}" --configuration Release --no-restore
        shell: powershell

      - name: Run tests with coverage
        run: |
          $testProjects = Get-ChildItem -Path "." -Recurse -Name "*Test*.csproj" | Where-Object { $_.Contains((Split-Path "${{ matrix.solution }}" -Parent)) }
          if ($testProjects.Count -gt 0) {
            Write-Host "Running tests for: $testProjects"
            dotnet-coverage collect 'dotnet test "${{ matrix.solution }}" --configuration Release --no-build --verbosity normal' -f xml -o 'coverage.xml'
          } else {
            Write-Host "No test projects found for ${{ matrix.solution }}"
            # Create empty coverage file so Sonar doesn't fail
            New-Item -Path "coverage.xml" -ItemType File -Force
            Set-Content -Path "coverage.xml" -Value '<?xml version="1.0" encoding="utf-8"?><coverage></coverage>'
          }
        shell: powershell
        continue-on-error: true

      - name: End Sonar analysis
        run: |
          dotnet sonarscanner end /d:sonar.login="${{ secrets.TC_SONAR_TOKEN }}"
        shell: powershell
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}