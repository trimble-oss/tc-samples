name: SonarQube Analysis

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - feature/Adding_Mend_Sonar_Scans

permissions:
  contents: read
  packages: read
  statuses: write

jobs:
  build-and-analyze:
    name: Build and Analyze
    runs-on: windows-latest
    strategy:
      matrix:
        solution:
          - SignIn/SignIn.sln
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Getting the full Git history to analyze the code
          fetch-depth: 0
          
      - name: Setup Java
        # The SonarScanner requires a Java runtime
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '17'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Add MSBuild to Path
        uses: microsoft/setup-msbuild@v2

      - name: Get solution name for Sonar project key
        id: solution-name
        run: |
          $solutionPath = "${{ matrix.solution }}"
          $solutionName = [System.IO.Path]::GetFileNameWithoutExtension($solutionPath)
          echo "solution-name=$solutionName" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Sonar
        run: |
          # The `RuntimeIdentifier` is added here to resolve the NETSDK1112 error
          # and ensure the correct runtime packs are downloaded.
          # We also add the `RestorePackagesWithLockFile` flag as a best practice.
          dotnet restore "${{ matrix.solution }}" /p:RuntimeIdentifier=win-x64 /p:RestorePackagesWithLockFile=true
          
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-coverage
          
          # We add the `RuntimeIdentifier` to the MSBuild command to ensure it uses the correct runtime.
          dotnet sonarscanner begin /k:"tc-samples:${{ steps.solution-name.outputs.solution-name }}" /d:sonar.host.url="${{ vars.TC_SONAR_HOST_URL }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.login="${{ secrets.TC_SONAR_TOKEN }}" /d:sonar.dotnet.excludeTestProjects=true
          msbuild /p:Configuration=Release /p:TargetFramework=net8.0-windows10.0.19041.0 /p:RuntimeIdentifier=win-x64 "${{ matrix.solution }}"
          
          # The `--no-build` flag is added here because the `msbuild` step has already built the project.
          # Running the build again is unnecessary and can cause issues.
          dotnet-coverage collect 'dotnet test --no-build' -f xml -o 'coverage.xml'
          
          dotnet sonarscanner end /d:sonar.login="${{ secrets.TC_SONAR_TOKEN }}"
        shell: powershell
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
