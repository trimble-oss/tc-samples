name: SonarQube Analysis

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - feature/Adding_Mend_Sonar_Scans

permissions:
  contents: read
  packages: read
  statuses: write

jobs:
  build-and-analyze:
    name: Build and Analyze
    runs-on: windows-latest
    strategy:
      matrix:
        solution:
          - SignIn/SignIn.sln
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Getting the full Git history to analyze the code
          fetch-depth: 0
          
      - name: Setup Java
        # The SonarScanner requires a Java runtime
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '17'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Add MSBuild to Path
        uses: microsoft/setup-msbuild@v2

      - name: Get solution name for Sonar project key
        id: solution-name
        run: |
          $solutionPath = "${{ matrix.solution }}"
          $solutionName = [System.IO.Path]::GetFileNameWithoutExtension($solutionPath)
          echo "solution-name=$solutionName" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Check network connectivity to SonarQube
        run: |
          # This command tests if the runner can reach the SonarQube server's endpoint.
          # It's helpful for diagnosing network-related issues.
          Write-Host "Testing connectivity to SonarQube server..."
          Test-NetConnection -ComputerName "sonar.trimble.tools" -Port 443
        shell: powershell

      - name: Sonar
        run: |
          # The `dotnet restore` command with the correct RuntimeIdentifier
          # ensures the necessary runtime packs are downloaded.
          dotnet restore "${{ matrix.solution }}" /p:RuntimeIdentifier=win-x64 /p:RestorePackagesWithLockFile=true
          
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-coverage
          
          # This line was causing the `NETSDK1134` error. We've removed the
          # `/p:RuntimeIdentifier=win-x64` flag because it's not supported
          # for building a solution file. The previous `restore` step has
          # already prepared the necessary runtime packs.
          dotnet sonarscanner begin /k:"tc-samples:${{ steps.solution-name.outputs.solution-name }}" /d:sonar.host.url="${{ vars.TC_SONAR_HOST_URL }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.login="${{ secrets.TC_SONAR_TOKEN }}" /d:sonar.dotnet.excludeTestProjects=true
          dotnet build "${{ matrix.solution }}" --configuration Release /p:TargetFramework=net8.0-windows10.0.19041.0
          
          # The `--no-build` flag is crucial here as the project has already been built
          # in the previous step. This prevents redundant work and potential issues.
          dotnet-coverage collect 'dotnet test --no-build' -f xml -o 'coverage.xml'
          
          dotnet sonarscanner end /d:sonar.login="${{ secrets.TC_SONAR_TOKEN }}"
        shell: powershell
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}