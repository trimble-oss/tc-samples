name: 'Mend SCA Scanner'
description: 'Runs the Mend scan with WSS configuration'
inputs:
  api-key:
    description: 'Use the TC_MEND_API_KEY organization secret.'
    required: true
  mend-email:
    description: 'Mend service account email'
    required: true
  scan-target:
    description: |
      Use values: default-branch, feature-branch or pull-request.
      Default branch targets the Trimble Connect product, and the feature branch targets the Sandbox - Trimble Connect product.
    required: true
  checkout:
    description: 'Use checkout action to get the sources. Use false if checkout is already done. Default value is false.'
    required: false
    default: 'false'
  store-artifacts:
    description: 'Set to true to store scanning artifacts, otherwise use false.'
    default: 'false'
    required: false
  dotnet-solution:
    description: 'Pass the dotnet solution path. Use with nuget default setup.'
    required: false
  config-file:
    description: 'Use to pass in the config file name. By default, the config file resolution looks for whitesource-signin.config'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout files
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Restore NuGet Dependencies
      run: dotnet restore "SignIn/SignIn.sln"
      shell: powershell

    - name: Run scanner
      shell: powershell
      env:
        WS_APIKEY: ${{ inputs.api-key }}
        WS_SERVICEUSER: ${{ inputs.mend-email }}
        WS_WSS_URL: https://saas.whitesourcesoftware.com/agent
        WS_SCAN_TARGET: ${{ inputs.scan-target }}
      run: |
        function verifySuccess($exitCode) {
            $scanUrl = "$env:GITHUB_SERVER_URL/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"
            $error = $null

            switch ($exitCode) {
                0 {
                    Write-Host "$scanUrl completed successfully!"
                    return
                }
                255 {
                    $error = "A general error has occurred in $scanUrl!"
                    break
                }
                254 {
                    $policyRejectionSummary = Get-ChildItem -Path "." -Filter "policyRejectionSummary.json" -Recurse | Select-Object -First 1
                    if ($policyRejectionSummary) {
                        $summary = Get-Content $policyRejectionSummary.FullName | ConvertFrom-Json
                        $totalRejected = $summary.summary.totalRejectedLibraries
                        $error = "$totalRejected Mend policy violation(s) found in $scanUrl`n`n"
                        foreach ($policy in $summary.rejectingPolicies) {
                            foreach ($lib in $policy.rejectedLibraries) {
                                $error += "- Dependency $($lib.name) used in $($lib.manifestFile)`n"
                            }
                        }
                        $error += "`n`nIf there are any new violations, please create a ticket in JIRA to address the issue.`n"
                        $error += "https://jira.trimble.tools/secure/CreateIssue!default.jspa"
                    } else {
                        $error = "Policy violations found but summary file not available in $scanUrl!"
                    }
                    break
                }
                253 {
                    $error = "A client-side error has occurred in $scanUrl!"
                    break
                }
                252 {
                    $error = "The agent was unable to establish a connection to the Mend application server in $scanUrl!"
                    break
                }
                251 {
                    $error = "A server-side error has occurred in $scanUrl!"
                    break
                }
                250 {
                    $error = "One of the package manager's prerequisite steps has failed in $scanUrl!"
                    break
                }
                default {
                    $error = "An unknown error code ($exitCode) has occurred during $scanUrl!"
                    break
                }
            }

            if ($error) {
                Write-Host $error
                Add-Content -Path $env:GITHUB_ENV -Value "ws_scan_error=$error"
                exit 1
            }
        }

        # Set project specifics for SignIn
        $projectName = "SignIn"
        $targetDir = "SignIn"
        $configFile = "whitesource-signin.config"

        # Determine product name based on scan target
        $productName = "Trimble Connect"
        if ($env:WS_SCAN_TARGET -eq "feature-branch" -or $env:WS_SCAN_TARGET -eq "pull-request") {
            $productName = "Sandbox - Trimble Connect"
        }

        Write-Host "Starting Mend scan for SignIn solution..."
        Write-Host "Project: $projectName"
        Write-Host "Product: $productName"
        Write-Host "Config: $targetDir/$configFile"
        
        Push-Location $targetDir

        # Download the WhiteSource Unified Agent (the PROVEN method)
        Write-Host "Downloading WhiteSource Unified Agent..."
        $agentUrl = "https://github.com/whitesource/unified-agent-distribution/releases/latest/download/wss-unified-agent.jar"
        $agentPath = "wss-unified-agent.jar"
        Invoke-WebRequest -Uri $agentUrl -OutFile $agentPath
        
        # Run the WhiteSource Unified Agent scan
        Write-Host "Running WhiteSource Unified Agent scan..."
        java -jar $agentPath -c $configFile -apiKey $env:WS_APIKEY -userKey $env:WS_SERVICEUSER -product "$productName" -project "$projectName" -wss_url $env:WS_WSS_URL; $lastExitCode = $LastExitCode
        verifySuccess $lastExitCode
        
        Pop-Location

    - name: Chat notification for errors
      if: ${{inputs.google-chat-webhook && env.ws_scan_error}}
      run: |
        $message = "*Mend scan error!*"
        $message += "`n`n"
        $message += "${{env.ws_scan_error}}"
        $message += "`n`n"
        $message += "*End of message*"

        $payload = @{
            "text" = $message
        }
        $jsonPayload = $payload | ConvertTo-Json -Compress
        
        Invoke-WebRequest -Uri "${{inputs.google-chat-webhook}}" -Method POST -ContentType "application/json; charset=UTF-8" -Body $jsonPayload
      shell: powershell

    - name: Pull request comment for errors
      if: ${{inputs.scan-target == 'pull-request' && env.ws_scan_error}}
      uses: actions/github-script@v7
      env:
        MESSAGE: ${{env.ws_scan_error}}
      with:
        script: |
          const {MESSAGE} = process.env
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.number,
            body: `${MESSAGE}`
          })

    - name: Mend Scan error
      if: ${{env.ws_scan_error}}
      env:
        MESSAGE: ${{env.ws_scan_error}}
      run: echo "$MESSAGE" >> "$GITHUB_STEP_SUMMARY"
      shell: bash

    - name: Generate UUID
      id: generate-uuid
      shell: bash
      run: |
        echo "ARTIFACT_UUID=$(uuidgen)" >> $GITHUB_OUTPUT

    - name: Archive scan artifacts
      uses: actions/upload-artifact@v4
      if: ${{ inputs.store-artifacts == 'true' }}
      with:
        name: scan-artifacts-${{ github.job }}-${{ github.run_number }}-${{ github.run_attempt }}-${{ steps.generate-uuid.outputs.ARTIFACT_UUID }}
        path: '**/whitesource'
        retention-days: 14 