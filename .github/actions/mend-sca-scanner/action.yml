name: 'Mend SCA Scanner'
description: 'Runs the Mend scan with WSS configuration'
inputs:
  api-key:
    description: 'Use the TC_MEND_API_KEY organization secret.'
    required: true
  mend-email:
    description: 'Mend service account email'
    required: true
  scan-target:
    description: |
      Use values: default-branch, feature-branch or pull-request.
      Default branch targets the Trimble Connect product, and the feature branch targets the Sandbox - Trimble Connect product.
    required: true
  checkout:
    description: 'Use checkout action to get the sources. Use false if checkout is already done. Default value is false.'
    required: false
    default: 'false'
  scan-folder:
    description: |
      Use to pass in a different location for scanning.
      By default, scanning and config file resolution happens from the repo root.
    required: false
  config-file:
    description: |
      Use to pass in the config file name.
      By default, the config file resolution looks for whitesource.config.
    required: false
    default: 'whitesource.config'
  dotnet-solution:
    description: 'Pass the dotnet solution path. Use with dotnet default setup.'
    required: false
  dotnet-version:
    description: 'Pass the dotnet version to be used, to use the default dotnet setup.'
    required: false
  store-artifacts:
    description: 'Set to true to store scanning artifacts, otherwise use false.'
    default: 'false'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout files
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    # DOTNET DEFAULT SETUP
    - name: Setup dotnet
      if: ${{ inputs.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Resolve dotnet dependencies
      if: ${{ inputs.dotnet-version && inputs.dotnet-solution }}
      run: dotnet restore "${{ inputs.dotnet-solution }}"
      shell: powershell

    - name: Resolve dotnet dependencies (root)
      if: ${{ inputs.dotnet-version && !inputs.dotnet-solution }}
      run: dotnet restore
      shell: powershell
    # DOTNET DEFAULT SETUP END

    - name: Run scanner
      shell: powershell
      env:
        MEND_API_KEY: ${{ inputs.api-key }}
        MEND_EMAIL: ${{ inputs.mend-email }}
        MEND_URL: https://saas.whitesourcesoftware.com
        WS_SCAN_TARGET: ${{ inputs.scan-target }}
        SCAN_FOLDER: ${{ inputs.scan-folder }}
        CONFIG_FILE: ${{ inputs.config-file }}
        DOTNET_SOLUTION: ${{ inputs.dotnet-solution }}
      run: |
        function verifySuccess($exitCode) {
            $scanUrl = "$env:GITHUB_SERVER_URL/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"
            $error = ""
            switch ($exitCode) {
                0 {
                    Write-Host "$scanUrl completed successfully!"
                    break
                }
                255 {
                    $error = "A general error has occurred in $scanUrl!"
                    break
                }
                254 {
                    $policyRejectionSummary = Get-ChildItem -Path "mend" -Filter "policyRejectionSummary.json" -Recurse | Select-Object -First 1
                    if ($policyRejectionSummary) {
                        $content = Get-Content -Path $policyRejectionSummary.FullName | ConvertFrom-Json
                        $totalRejected = $content.summary.totalRejectedLibraries
                        $error = "$totalRejected Mend policy violation(s) found in $scanUrl"
                        $error += "`n`n"
                        $content.rejectingPolicies | ForEach-Object {
                            $policy = $_
                            $policy.rejectedLibraries | ForEach-Object {
                                $library = $_
                                $error += "- Dependency $($library.name) used in $($library.manifestFile)`n"
                            }
                        }
                        $error += "`n`n"
                        $error += "If there are any new violations, please create a ticket in JIRA to address the issue."
                        $error += "`n"
                        $error += "https://jira.trimble.tools/secure/CreateIssue!default.jspa"
                    } else {
                        $error = "A policy violation occurred in $scanUrl but no summary report was found."
                    }
                    break
                }
                253 {
                    $error = "A client-side error has occurred in $scanUrl!"
                    break
                }
                252 {
                    $error = "The agent was unable to establish a connection to the Mend application server in $scanUrl!"
                    break
                }
                251 {
                    $error = "A client-side error has occurred in $scanUrl!"
                    break
                }
                250 {
                    $error = "One of the package manager's prerequisite steps has failed in $scanUrl!"
                    break
                }
                default {
                    $error = "An unknown error code ($exitCode) has occurred during $scanUrl!"
                    break
                }
            }

            if ($error) {
                Write-Host $error
                Add-Content -Path $env:GITHUB_ENV -Value "ws_scan_error=$error"
                exit 1
            }
        }

        # Get the absolute path for the executable to avoid PATH issues
        $mendExePath = "$PSScriptRoot\mend.exe"

        Write-Host "Installing Mend CLI for Windows..."
        Invoke-WebRequest -Uri "https://downloads.mend.io/cli/windows_amd64/mend.exe" -OutFile $mendExePath
        Write-Host "Mend CLI installed successfully"
        & $mendExePath version # Run version check using the full path

        # Project name is the repository name, but the variable contains the Organization name.
        $projectName = "$env:GITHUB_REPOSITORY".Split('/')[-1]

        # Use the provided scanning folder
        $scanFolder = if ($env:SCAN_FOLDER) { $env:SCAN_FOLDER } else { "." }
        
        # Determine target directory
        if ($env:DOTNET_SOLUTION) {
          $targetDir = [System.IO.Path]::GetDirectoryName($env:DOTNET_SOLUTION)
          $projectName = [System.IO.Path]::GetFileNameWithoutExtension($env:DOTNET_SOLUTION)
        } else {
          $targetDir = $scanFolder
          $projectName = "tc-samples"
        }
        
        # Find the config file
        $wssConfig = if ($env:CONFIG_FILE) {
            $env:CONFIG_FILE
        } else {
            $configFileName = "whitesource.config"
            $configFile = Get-ChildItem -Path $targetDir -Filter "whitesource.config" -Recurse | Select-Object -First 1
            if ($configFile) { $configFile.FullName } else { $configFileName }
        }

        $productName = "Trimble Connect"
        if ($env:WS_SCAN_TARGET -eq "feature-branch" -or $env:WS_SCAN_TARGET -eq "pull-request") {
            $productName = "Sandbox - Trimble Connect"
        }

        # Run the Mend CLI scan
        Write-Host "Starting Mend scan with CLI..."
        Push-Location $targetDir

        # This will fail the run if policies are rejected
        & $mendExePath dep init --api-key $env:MEND_API_KEY --user-key $env:MEND_EMAIL
        & $mendExePath dependencies --dir . --update --non-interactive --config $wssConfig --api-key $env:MEND_API_KEY --user-key $env:MEND_EMAIL
        verifySuccess $?
        
        Pop-Location
        
    - name: Chat notification for errors
      if: ${{inputs.google-chat-webhook && env.ws_scan_error}}
      run: |
        $message = "*Mend scan error!*"
        $message += "`n`n"
        $message += "${{env.ws_scan_error}}"
        $message += "`n`n"
        $message += "*End of message*"

        $payload = @{
            "text" = $message
        }
        $jsonPayload = $payload | ConvertTo-Json -Compress
        
        Invoke-WebRequest -Uri "${{inputs.google-chat-webhook}}" -Method POST -ContentType "application/json; charset=UTF-8" -Body $jsonPayload
      shell: powershell

    - name: Pull request comment for errors
      if: ${{inputs.scan-target == 'pull-request' && env.ws_scan_error}}
      uses: actions/github-script@v7
      env:
        MESSAGE: ${{env.ws_scan_error}}
      with:
        script: |
          const {MESSAGE} = process.env
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.number,
            body: `${MESSAGE}`
          })

    - name: Mend Scan error
      if: ${{env.ws_scan_error}}
      env:
        MESSAGE: ${{env.ws_scan_error}}
      run: echo "$MESSAGE" >> "$GITHUB_STEP_SUMMARY"
      shell: bash

    - name: Generate UUID
      id: generate-uuid
      shell: bash
      run: |
        echo "ARTIFACT_UUID=$(uuidgen)" >> $GITHUB_OUTPUT

    - name: Archive scan artifacts
      uses: actions/upload-artifact@v4
      if: ${{ inputs.store-artifacts == 'true' }}
      with:
        name: scan-artifacts-${{ github.job }}-${{ github.run_number }}-${{ github.run_attempt }}-${{ steps.generate-uuid.outputs.ARTIFACT_UUID }}
        path: '**/whitesource'
        retention-days: 14
